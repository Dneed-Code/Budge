<!--<p></p>-->
<!--<a href="/users/logout">Logout</a>-->
<div class="row col-equal-height">
    <div class="col-9 ">
        <div class="row col-equal-height mb-4 ">
            <div class="col-md-6">
                <div class="card tile">
                    <div class="row p-2">
                        <div class="col-8">
                            <h5 class="pl-3">Total Income Post-Tax (Yearly)</h5>
                        </div>
                        <div class="col-4">
                            <p class="pr-2" id="income_total">18%</p>
                        </div>
                    </div>
                    <div id="income_trend"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card tile">
                    <div class="row p-2">
                        <div class="col-9">
                            <h5 class="pl-3">Total Cumulative Expenses (Yearly)</h5>
                        </div>
                        <div class="col-3">
                            <p class="pr-2" id="expense_total"></p>
                        </div>
                    </div>
                    <div id="expense_trend"></div>
                </div>
            </div>
        </div>
        <div class="row col-equal-height">
            <div class="col-md-12">
                <div class="card tile">
                    <div class="card-body">
                        <div id="chart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-3">

        <div class="card tile">
            <div class="card-body">
                <div class="widget-heading">
                    <h5 class="border-bottom ">Recent Activity</h5>
                </div>
                {{#each data.notifications}}
                    <div class="row">
                        <div class="col-9">
                            <p style="margin-bottom: 1px">{{title}}</p>
                            <p style="margin-bottom: 1px">{{formatDate date_time 'short'}}</p>
                        </div>
                        <div class="col-3">
                            <img src="https://eu.ui-avatars.com/api/?name={{user.first_name}}+{{user.last_name}}&background=random&rounded=true&size=40&bold=true"
                                 alt="" id="recent-avatars">
                        </div>
                    </div>
                <div class="row">
                    <div class="col-12">
                        <p class="noti-desc">{{description}}</p>
                    </div>
                </div>
                {{/each}}

            </div>
        </div>
        <script>


            var income = [{{data.income_per_month}}];
            var expense = [{{data.expense_per_month}}];


            var options1 = getOptions(income, expense);
            var cashflowchart = new ApexCharts(
                    document.querySelector("#chart"),
                    options1
            );
            cashflowchart.render();

            var incomechart = new ApexCharts(document.querySelector("#income_trend"), getDIncomeOptions(income, 'Income', 'rgba(0, 199, 17)'));
            incomechart.render()
            var expensechart = new ApexCharts(document.querySelector("#expense_trend"), getDIncomeOptions(expense, 'Expense', '#E64040'));
            expensechart.render()

            $(window).on('load', function (e) {
                $('#expense_total').html('£' + Math.round(expense.reduce((a, b) => a + b, 0)));
                $('#income_total').html('£' + Math.round(income.reduce((a, b) => a + b, 0)));

                window.dispatchEvent(new Event('resize'));

            });


            var socket = io();
            socket.on('group update', function (data) {
                //toastr.info('Rog Wood has updated an Income, please refresh the page to see these changes reflected!', 'User Group Data Update');
                console.log(data);
                renderCharts(data);
            });

            function renderCharts(data) {
                cashflowchart.updateSeries([{
                    name: 'Income',
                    data: data.income_per_month
                }, {
                    name: 'Expenses',
                    data: data.expense_per_month
                }])
                incomechart.updateSeries([{
                    name: 'Income',
                    data: data.income_per_month
                }])
                expensechart.updateSeries([{
                    name: 'Expense',
                    data: data.expense_per_month
                }])
                cashflowchart.clearAnnotations();
                newAnnotations();
                try {
                    $('#expense_total').html('£' + Math.round(data.expense_per_month.reduce((a, b) => a + b, 0)));
                    $('#income_total').html('£' + Math.round(data.income_per_month.reduce((a, b) => a + b, 0)));
                } catch (e) {
                }
            }

            function newAnnotations() {
                const highest1 = cashflowchart.getHighestValueInSeries(0);
                const highest2 = cashflowchart.getHighestValueInSeries(1);

                cashflowchart.addPointAnnotation({
                    x: new Date(cashflowchart.w.globals.seriesX[0][cashflowchart.w.globals.series[0].indexOf(highest1)]).getTime(),
                    y: highest1,
                    label: {
                        style: {
                            cssClass: 'd-none'
                        }
                    },
                    customSVG: {
                        SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="#4abf3f" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-circle"><circle cx="12" cy="12" r="10"></circle></svg>',
                        cssClass: undefined,
                        offsetX: -8,
                        offsetY: 5
                    }
                })

                cashflowchart.addPointAnnotation({
                    x: new Date(cashflowchart.w.globals.seriesX[1][cashflowchart.w.globals.series[1].indexOf(highest2)]).getTime(),
                    y: highest2,
                    label: {
                        style: {
                            cssClass: 'd-none'
                        }
                    },
                    customSVG: {
                        SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="#e7515a" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-circle"><circle cx="12" cy="12" r="10"></circle></svg>',
                        cssClass: undefined,
                        offsetX: -8,
                        offsetY: 5
                    }
                })
            }

        </script>
