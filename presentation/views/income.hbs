<style>
    label {
        color: white;
    }
</style>
<div class="row col-equal-height mb-4">
    <div class="col-md-4">
        <div class="card tile">
            <div class="card-body text-center">
                <h4>Income Over Time (Year) </h4>
                <canvas id="incomeLineChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card tile" style="">
            <div class="card-body text-center">
                <h4 id="donutHead">Active Income Contribution (Total)</h4>
                <canvas style="margin-top: 10px" id="incomeDonutChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card tile" style="">
            <div class="card-body text-center">
                <h4>Total Current Monthly Income</h4>
                <p>This is the summation of all incomes from your group, that are active this month.</p>
                <h1 class="pt-2">£{{data.income_current_month}}</h1>
                <p class="pt-3">This is {{data.change}}</p>
            </div>
        </div>
    </div>
</div>
<div class="row col-equal-height mb-3">
    <div class="col-md-12">
        <div class="card tile" style="">
            <div class="card-body">
                <table id="table_id" class="display table table-hover">
                    <thead>
                    <tr>
                        <th>User Name</th>
                        <th>Source</th>
                        <th>Amount</th>
                        <th>Date Received</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                    </tr>
                    </thead>
                    <tbody>
                    {{#each data.income_list}}
                        <tr class="dataHover hover" onclick="editModal('{{id}}')">
                            <td>{{user.first_name}} {{user.last_name}}</td>
                            <td>{{source}}</td>
                            <td>£{{amount}}</td>
                            <td data-sort="{{date_paid}}">{{formatDatePaid date_paid}}</td>
                            <td data-sort="{{formatDate start_date "year"}}">{{formatDate start_date "short"}}</td>
                            <td data-sort="{{formatDate end_date "year"}}">{{formatEndDate end_date "short" "income"}}</td>
                        </tr>
                    {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{{> addIncome}}
{{> editIncome}}
<script>

    var incomeAmounts = []
        {{#each data.income_list}}
        incomeAmounts.push({{amount}});
        {{/each}}
    function sum(incomeAmounts) {
        var sum = 0;
        for (var index = 0; index < incomeAmounts.length; index++) {
            sum += incomeAmounts[index];
        }
        return sum;
    }

    $(document).ready(
            function () {
                $('#incomeTotal').text('£' + sum(incomeAmounts));
            }
    );
    var ctx = document.getElementById('incomeLineChart').getContext('2d');
    var donutLabels = [];
    var donutAmounts = [];
        {{#each data.active_incomes}}
        donutLabels.push('{{source}}');
        donutAmounts.push('{{amount}}');
        {{else}}
        $("#donutHead").after("<p>You have no active incomes currently, Try adding one!</p>");
        {{/each}}


    var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Income Over Time (£)',
                backgroundColor: 'rgba(20, 255, 40, 0.05)',
                borderColor: 'rgba(0, 199, 17, 0.75)',
                data: [{{data.income_per_month}}]
            }]
        },

        // Configuration options go here
        options: {
            responsive: true,
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
    var dough = document.getElementById('incomeDonutChart').getContext('2d');
    var myDoughnutChart = new Chart(dough, {
        type: 'doughnut',
        // The data for our dataset
        data: {
            labels: donutLabels,
            datasets: [{
                label: 'My First dataset',
                backgroundColor: ['#5c1ac3', '#e7515a', '#e2a03f', '#60e23f', '#3cba92', '#194e3a', '#bff0c1', '#ff56c1',
                    '#5c1dc3', '#e9515a', '#e6a03f', '#60f23f', '#3cca32', '#124f3a', '#bbf0f1', '#fb68c1'],
                borderColor: '#0e1726',
                weight: 2,
                data: donutAmounts
            }]
        },
        options: {
            cutoutPercentage: 35
        }
    });
    toastr.options = {
        "preventDuplicates": true,
        "preventOpenDuplicates": true
    };

    function postIncome() {
        var endDate;
        var isErrors = false;
        if ($('#inputSource').val() == "" || $('#inputSource').val().length < 2) {
            toastr.warning('You must enter a value for the source of the income, it must be greater than two characters!', 'Source Input Error');
            isErrors = true;
        }
        if ($('#inputAmount').val() == "" || $('#inputAmount').val().length < 1) {
            toastr.error('You must enter a value for the amount of the income, it must be a number!', 'Amount Input Error');
            isErrors = true;
        }
        if ($('#inputStartDate').val() == "") {
            toastr.info('You must enter a valid start date of the income, it must be a complete date!', 'Start Date Input Error');
            isErrors = true;
        }
        if ($('#gridCheck').is(':checked')) {
            endDate = new Date(2025, 12, 12);
        } else if ($('#inputEndDate').val() == "" || !isAfterStartDate($('#inputEndDate').val())) {
            toastr.info('You must enter a valid end date of the income, it must be a after the start date!', 'End Date Input Error');
            isErrors = true;
        } else {
            endDate = $('#inputEndDate').val();
        }

        if (!isErrors) {
            $.ajax({
                url: '/income/create',
                type: 'POST',
                cache: false,
                data: {
                    source: $('#inputSource').val(),
                    amount: $('#inputAmount').val(),
                    start_date: $('#inputStartDate').val(),
                    end_date: endDate
                },
                success: function (data) {
                    window.location.assign('/income')
                }
                , error: function (jqXHR, textStatus, err) {
                    //alert('text status ' + textStatus + ', err ' + err)
                }
            });
        }
    }

    function isAfterStartDate() {
        return new $('#inputStartDate').val() <= $('#inputEndDate').val();
    }

    function isAfterEditStartDate() {
        return new $('#inputEditStartDate').val() <= $('#inputEditEndDate').val();
    }

    function editModal(id) {
        var thisId = id;
        $.ajax({
            url: '/income/' + thisId + '/update',
            type: 'GET',
            dataType: 'json',
            id: thisId,
            success: function (data) {
                $('#inputEditSource').val(data.data.income_found[0].source);
                $('#inputEditAmount').val(data.data.income_found[0].amount);
                $('#inputEditStartDate').val(formatDate(data.data.income_found[0].start_date));
                $('#inputEditEndDate').val(formatDate(data.data.income_found[0].end_date));
                $('#inputEditId').text(thisId);
            }
            , error: function (jqXHR, textStatus, err) {
                alert('text status ' + textStatus + ', err ' + err)
            }
        });
        $('#editIncomeModal').modal('show');
    }

    function editIncome() {
        var endDate;
        var isErrors = false;
        if ($('#inputEditSource').val() == "" || $('#inputEditSource').val().length < 2) {
            toastr.warning('You must enter a value for the source of the income, it must be greater than two characters!', 'Source Input Error');
            isErrors = true;
        }
        if ($('#inputEditAmount').val() == "" || $('#inputEditAmount').val().length < 2) {
            toastr.error('You must enter a value for the amount of the income, it must be a number and larger than 10!', 'Amount Input Error');
            isErrors = true;
        }
        if ($('#inputEditStartDate').val() == "") {
            toastr.info('You must enter a valid start date of the income, it must be a complete date!', 'Start Date Input Error');
            isErrors = true;
        }
        if ($('#gridEditCheck').is(':checked')) {
            endDate = new Date(2025, 12, 12);
        } else if ($('#inputEditEndDate').val() == "" || !isAfterEditStartDate($('#inputEditEndDate').val())) {
            toastr.info('You must enter a valid end date of the income, it must be a after the start date!', 'End Date Input Error');
            isErrors = true;
        } else {
            endDate = $('#inputEditEndDate').val();
        }
        var id = $('#inputEditId').text();
        if (!isErrors) {
            $.ajax({
                url: '/income/' + id + '/update',
                type: 'POST',
                cache: false,
                data: {
                    source: $('#inputEditSource').val(),
                    amount: $('#inputEditAmount').val(),
                    start_date: $('#inputEditStartDate').val(),
                    end_date: endDate
                },
                success: function (data) {
                    window.location.assign('/income')
                }
                , error: function (jqXHR, textStatus, err) {
                    //alert('text status ' + textStatus + ', err ' + err)
                }
            });
        }
    }

    function deleteIncome() {
        var id = $('#inputEditId').text();
            $.ajax({
                url: '/income/' + id + '/delete',
                type: 'POST',
                cache: false,
                data: {
                    source: $('#inputEditSource').val(),
                    amount: $('#inputEditAmount').val(),
                    start_date: $('#inputEditStartDate').val()
                },
                success: function (data) {
                    window.location.assign('/income')
                }
                , error: function (jqXHR, textStatus, err) {
                    //alert('text status ' + textStatus + ', err ' + err)
                }
            });

    }

    function formatDate(date) {
        var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#sidebarCollapse').on('click', function () {
            $('#sidebar').toggleClass('active');
        });
    });

    $(document).ready(function() {
        $('#table_id').DataTable({
            "sDom": '<"row view-filter"<"col-sm-8"<"toolbar">><"col-sm-4"f><"clearfix">>t<"row view-pager"<"col-sm-12"<"text-center"p>>>',
            "oLanguage": {
                "oPaginate": { "sPrevious": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-left"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>', "sNext": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-right"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>' },
                "sInfo": "Showing page _PAGE_ of _PAGES_",
                "sSearch": '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>',
                "sSearchPlaceholder": "Search...",
            },
            "lengthChange": false,
            "pageLength": 5,
            drawCallback: function () {
                $('.t-dot').tooltip({ template: '<div class="tooltip status" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>' })
                $('.dataTables_wrapper table').removeClass('table-striped');
            }
        });
        $("div.toolbar").html('<p style="margin-top: 17px;margin-bottom: 0; font-size: 0.9em">Below you will see all incomes associated with your group, to edit them simply click the row in the table of the income you would like to edit!</p>');
    } );
</script>
